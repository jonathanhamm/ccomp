<program> ->
	program id (<identifier_list>) ;
	<program'>
	<compound_statement>
	.
	{
        pushscope(id.entry)
        emit(labelf, "_", id.entry, ":")
        <program>.type := <identifier_list>.type
        if <compound_statement>.type <> null then
            emit("return")
        end
	}

<program'> ->
	<declarations> <dec>
	|
	<subprogram_declarations>
	|
	ε

<dec> ->
	<subprogram_declarations>
	|
	ε

<identifier_list> ->
	id <identifier_list'>
    {
        addarg(id.entry, integer)
        <identifier_list>.args := makelistf(integer)
        <identifier_list'>.args := <identifier_list>.args
    }

<identifier_list'> ->
	, id <identifier_list'>
	{
        addarg(id.entry, integer)
        listappend(<identifier_list'>.args, integer)
        <identifier_list'>[1].args := <identifier_list'>.args
	}
	|
	ε
    {
        <identifier_list'>.type := void
    }

<declarations> ->
	var id : <type> ; <declarations'> 
    {
        addtype(id.entry, <type>.type)
    }
<declarations'> ->
	var id : <type> ; <declarations'>
    {
        addtype(id.entry, <type>.type)
    }
	|
	ε

<type> ->
	<standard_type>
    {
        <type>.type := <standard_type>.type
    }
	|
	array [num..num] of <standard_type>
    {
        <type>.type := array(num[1].val .. num[2].val, <standard_type>.type)
    }

<standard_type> ->
	integer
    {
        <standard_type>.type := integer
    }
	|
	real
    { 
        <standard_type>.type := real
    }
	
<subprogram_declarations> ->
	<subprogram_declaration> ; <subprogram_declarations'>

<subprogram_declarations'> ->
	<subprogram_declaration> ; <subprogram_declarations'>
	|
	ε

<subprogram_declaration> ->
	<subprogram_head>
	<subprogram_declaration'>
	<compound_statement>
    {
        emit("_beginfunc")
        if <compound_statement>.type = void then
            emit("return")
            popscope()
            resettemps()
        end
    }
<subprogram_declaration'> ->
	<declarations> <dec>
	|
	<subprogram_declarations>
	|
	ε

<subprogram_head> ->
	procedure id <subprogram_head'>;
    {
        pushscope(id.entry)
        emit(" ")
        emit(labelf, "_", id.entry, ":")
        addtype(id.entry, <subprogram_head'>.type)
    }
<subprogram_head'> ->
	<arguments>
    {
        <subprogram_head'>.type := <arguments>.args
    }
	|
	ε
    {
        <subprogram_head'>.type := makelistf(void)
    }

<arguments> ->
	(<parameter_list>)
    {
        <arguments>.args := <parameter_list>.args
    }

<parameter_list> ->
	id : <type> <parameter_list'> 
    { 
        addarg(id.entry, <type>.type)
        <parameter_list>.args := makelistf(<type>.type)
        <parameter_list'>.args := <parameter_list>.args
    }
<parameter_list'> ->
	; id : <type> <parameter_list'> 
    { 
        addarg(id.entry, <type>.type)
        listappend(<parameter_list'>.args, <type>.type)
        <parameter_list'>[1].args := <parameter_list'>.args
    }
	|
	ε
    {
        <parameter_list'>.args := void
    }
	
<compound_statement> ->
	begin
	<compound_statement'>
	end
    {
        resettemps()
        <compound_statement>.type := void
    }

<compound_statement'> ->
	<optional_statements>
	|
	ε
	
<optional_statements> ->
	<statement_list>

<statement_list> ->
	<statement> <statement_list'>
<statement_list'> ->
	; <statement> <statement_list'>
    {
        resettemps()
    }
	|
	ε

<statement> ->
	<variable> assignop <expression> 
    {
        <statement>.type := void
        if <variable>.type = integer then
            if <expression>.type <> integer then
                error(assignop, "Incompatible assignment to integer type")
            end
        elif <variable>.type = real then 
            if (<expression>.type <> real) and (<expression>.type <> integer) then
                error(assignop, "Incompatible assigment to real type")
            end
        elif <variable>.type <> <expression>.type then
            error(assignop, "Incompatible types used in assignment")
        end
        
        emit(<variable>.place, " := ", <expression>.place)
    }
	|
	<procedure_statement> 
    {
        <statement>.type := void
        emit("call ", resolveproc(<procedure_statement>.id))
    }
	|
	<compound_statement>
    {
        <statement>.type := void
    }
	|
	while <expression> do <statement>
    {
        <statement>.type := void
        
        <statement>.begin := newlabel
        <statement>.true := newlabel
        <statement>.false := newlabel
        
        emit(label, <statement>.begin,":")
        if <expression>.type <> null then
            emit("if ", <expression>.place, " goto ", <statement>.true)
            emit("goto ", <statement>.false)
            emit(label, <statement>.true,":")
        end
        if <statement>[1].type <> null then
            emit("goto ", <statement>.begin)
            emit(label, <statement>.false, ":")
        end

    }
	|
	if <expression> then <statement> <statement'>
    {
        <statement>.type := void
        <statement>.true := newlabel
        <statement>.false := newlabel
        <statement'>.next := newlabel

        emit("if ", <expression>.place, " goto ", <statement>.true)
        if <expression>.type <> null then
            emit("goto ", <statement>.false)
        end
        if <expression>.type <> null then
            emit(label, <statement>.true, ":")
        end
        if <statement>[1].type <> null then
            emit("goto ", <statement'>.next)
            emit(label, <statement>.false, ":")
        end
    }

<statement'> ->
	else <statement>
    {
        if <statement>.type <> null then
            emit(label, <statement'>.next, ":")
        end
    }
	|
	ε
    {
        <statement'>.type := void
        emit(label, <statement'>.next, ":")
    }
	
<variable> ->
	id <variable'> 
    {
        if <variable'>.type = integer then
            <variable>.type := getarray(id)
        elif <variable'>.type = void then
            <variable>.type := lookup(id)
        else
            <variable>.type := getarray(id)
            error(id, "Non-integer type used in array index")
        end
        
        <variable>.place := id.entry
    }
<variable'> ->
	[<expression>]
    {
        <variable'>.type := <expression>.type
        <variable'>.place := <expression>.place
    }
	|
	ε
    {
        <variable'>.type := void
    }

<procedure_statement> ->
	call id <procedure_statement'>
    {
        if lookup(id) = <procedure_statement'>.type then
            <procedure_statement>.type := void
        end
        <procedure_statement>.id := id.entry
    }

<procedure_statement'> ->
	(<expression_list>)
    {
        <procedure_statement'>.type := <expression_list>.args
    }
	|
	ε
    {
        <procedure_statement'>.type := makelista(void)
    }
	
<expression_list> ->
	<expression> <expression_list'>
    {
        <expression_list>.args := makelista(<expression>.type)
        <expression_list'>.args := <expression_list>.args
        emit("push ", <expression>.place)
    }
<expression_list'> ->
	, <expression> <expression_list'>
    {
        listappend(<expression_list'>.args, <expression>.type)
        <expression_list'>[1].args := <expression_list'>.args
        emit("push ", <expression>.place)
    }
	|
	ε
    {
        <exprssion_list'>.args := void
    }
	
<expression> ->
	<simple_expression> <expression'>
    {
        <expression'>.in := <simple_expression>.type
        <expression>.type := <simple_expression>.type
        if <expression'>.type <> void then
            <expression>.type := <expression'>.type

        end
        
        <expression>.place := newtemp
        <expression'>.place1 := <expression>.place
        <expression'>.place2 := <simple_expression>.place
        if <expression'>.type = void then
            emit(<expression>.place, " := ", <simple_expression>.place)
        end
    }

<expression'> ->
	relop <simple_expression>
    {
        if (<expression'>.in <> integer) and (<expression'>.in <> real) then
            error(relop, "Incompatible type used on left-hand side of relational operator")
        end
        if (<simple_expression>.type <> integer) and (<simple_expression>.type <> real) then
            error(relop, "Incompatible type used on right-hand side of relational operator")
        end
        <expresion'>.type := integer
        
        emit(<expression'>.place1, " := ", <expression'>.place2, " ", relop.entry, " ", <simple_expression>.place)
    }
	|
	ε
    {
        <expression'>.type := void
    }
	
<simple_expression> ->
	<sign> <term> <simple_expression'> 
    {
        <simple_expression>.type := <term>.type
        <simple_expression'>.in := <term>.type
        if <simple_expression'>.type <> void then
            <simple_expression>.type := <simple_expression'>.type
        end
        
        <simple_expression>.place := newtemp
        if <sign>.code = "uminus" then
            emit(<simple_expression>.place, " := ", "uminus ", <term>.place)
        end
        <simple_expression'>.place1 := <simple_expression>.place
        <simple_expression'>.place2 := <term>.place
        if <simple_expression'>.type = void then
            emit(<simple_expression>.place, " := ", <term>.place)
        end
    }
	|
	<term> <simple_expression'>
    {
        <simple_expression>.type := <term>.type
        <simple_expression'>.in := <term>.type
        if <simple_expression'>.type <> void then
            <simple_expression>.type := <simple_expression'>.type
        end
        
        <simple_expression>.place := newtemp
        <simple_expression'>.place1 := <simple_expression>.place
        <simple_expression'>.place2 := <term>.place
        if <simple_expression'>.type = void then
            emit(<simple_expression>.place, " := ", <term>.place)
        end
    }

<simple_expression'> ->
	addop <term> <simple_expression'>
    {
        if (<simple_expression'>.in = integer) and (<term>.type = integer) then
            <simple_expression'>[1].in := integer
            <simple_expression'>.type := integer
        elif (<simple_expression'>.in = integer) and (<term>.type = real) then
             <simple_expression'>[1].in := real
            <simple_expression'>.type := real
        elif (<simple_expression'>.in = real ) and (<term>.type = integer) then
             <simple_expression'>[1].in := real
            <simple_expression'>.type := real
        elif (<simple_expression'>.in = real) and (<term>.type = real) then
            <simple_expression'>[1].in := real
        else
            error(addop, "Invalid type used in addop expression")
        end
        if <simple_expression'>[1].type <> void then
            <simple_expression'>.type := <simple_expression'>[1].type
        end
        
        emit(<simple_expression'>.place1, " := ", <simple_expression'>.place2, " ", addop.entry, " ", <term>.place)
        <simple_expression'>[1].place1 := <simple_expression'>.place1
        <simple_expression'>[1].place2 := <simple_expression'>.place1
    }
	|
	ε
    {
        <simple_expression'>.type := void
    }


<term> ->
	<factor> <term'>
	{
        <term'>.in := <factor>.type
        <term>.type := <factor>.type
        if <term'>.type <> void then
            <term>.type := <term'>.type
        end
        
        <term>.place := newtemp
        <term'>.place1 := <term>.place
        <term'>.place2 := <factor>.place
        if <term'>.type = void then
            emit(<term>.place, " := ", <factor>.place)
        end

	}
<term'> ->
        mulop <factor> <term'>
        {
            if mulop.entry = mod then
                if (<term'>.in <> integer) or (<factor>.type <> integer) then
                    error(mulop, "Expected integer operands for modulo operation")
                end
            elif (mulop.entry = "/") or (mulop.entry = "div") then
                <term'>.in := real
                <term'>[1].in := real
                <term>.type := real
            else
                if (<term'>.in = integer) and (<factor>.type = integer) then
                    <term'>[1].in := integer
                    <term'>.type := integer
                elif (<term'>.in = integer) and (<factor>.type = real) then
                    <term'>[1].in := real
                    <term'>.type := real
                elif (<term'>.in = real ) and (<factor>.type = integer) then
                    <term'>[1].in := real
                    <term'>.type := real
                else
                    error(mulop, "Invalid type used in mulop expression")
                end
            end
            if <term'>[1].type <> void then
                <term'>.type := <term'>[1].type
                print(<term'>[1].type)
            end
            
            emit(<term'>.place1, " := ", <term'>.place2, " ", mulop.entry, " ", <factor>.place)
            <term'>[1].place1 := <term'>.place1
            <term'>[1].place2 := <term'>.place1
        }
        |
        ε
        {
            <term'>.type := void
        }

<factor> ->
	id <factor'>
    {
        if <factor'>.type = integer then
            <factor>.type := getarray(id)
        elif <factor'>.type = void then
            <factor>.type := lookup(id)
        else
            <factor>.type := getarray(id)
            error(id, "Non-integer type used in array index")
        end
        
        if <factor'>.type <> void then
            <factor>.place := newtemp
            print(getwidth(id))
            halt()
            emit(<factor>.place, " := ", id.entry, "[", <factor'>.place, "]")
        else
            <factor>.place := id.entry
        end
    }
	|
	num
    {
        <factor>.type := num.type
        <factor>.place := num.val
    }
	|
	(<expression>)
    { 
        <factor>.type := <expression>.type
        <factor>.place := <expression>.place
    }
	|
	not <factor>
    {
        <factor>.type := <factor>[1].type
        if <factor>.type <> integer then
            error(bob, "Incompatible type used in logical not")
            <factor>.type := integer
        end

        <factor>.place := newtemp
        emit(<factor>.place, " := ", "not ", <factor>[1].place)
    }
    
<factor'> ->
	[<expression>]
    {
        <factor'>.type := <expression>.type
        <factor'>.place := <expression>.place
    }
	|
	ε
    {
        <factor'>.type := void
    }
    
<sign> ->
	+ {<sign>.code := "uplus"} | - {<sign>.code := "uminus"}
