<program> ->
	program id \( <identifier_list> \) ;
	<program'>
	<compound_statement>
	\.
	{
        <identifier_list>.derp := derp
	}        

<program'> ->
	<declarations> <dec>
	{
    }
	|
	<subprogram_declarations>
	{}
	|
	ε
	
<dec> ->
	<subprogram_declarations>
	{
        <subprogram_declarations>.type := integer[10]
        emit(1,11,1,3)
        <subprogram_declarations>1.val := 10
        <dec>.value := (4*3*4)+40*(3*2*1)/(4-3.2)
        if <subprogram_declarations>.type = 4 or (<subprogram_declarations>.type <> 5) then 
            <subprogram_declarations>.type := 32
        else
            <subprogram_declarations>.haha := 23+ 4
        fi
        <dec>.omgnom := (4+3-3.3*321+322+(1+1))
    }
	|
	ε

<identifier_list> ->
	id <identifier_list'>
	{
        <identifier_list'>.bah := 10
	}
<identifier_list'> ->
	, id <identifier_list'>
	{
        <identifier_list'>.code:=derp
	}
	|
	ε

<declarations> ->
	var id : <type> ; <declarations'> 
    {
        addtype(id.entry, <type>.type)
    }
<declarations'> ->
	var id : <type> ; <declarations'>
    {
        addtype(id.entry, <type>.type)
    }
	|
	ε

<type> ->
	<standard_type>
    {
        <type>.type := <standard_type>.type
        print(<type>.type)

    }
	|
	array \[ num \. \. num \] of <standard_type>
    {

        <type>.type := array(num[1].val .. num[2].val, <standard_type>.type)
        print("got type: ", <type>.type)
    }

<standard_type> ->
	integer
    {
           halt()

        <standard_type>.type := integer 

        print("got _type: ", <standard_type>.type)
    }
	|
	real
    { 
           halt()

        <standard_type>.type := real

       print("got _type: ", <standard_type>.type)

    }
	
<subprogram_declarations> ->
	<subprogram_declaration> ; <subprogram_declarations'>
<subprogram_declarations'> ->
	<subprogram_declaration> ; <subprogram_declarations'>
	|
	ε

<subprogram_declaration> ->
	<subprogram_head>
	<subprogram_declaration'>
	<compound_statement>
<subprogram_declaration'> ->
	<declarations> <dec>
	|
	<subprogram_declarations>
	|
	ε

<subprogram_head> ->
	procedure id <subprogram_head'>;
<subprogram_head'> ->
	<arguments>
	|
	ε

<arguments> ->
	\( <parameter_list> \)
<parameter_list> ->
	id : <type> <parameter_list'>
<parameter_list'> ->
	; id : <type> <parameter_list'>
	|
	ε
	
<compound_statement> ->
	begin
	<compound_statement'>
	end
<compound_statement'> ->
	<optional_statements>
	|
	ε
	
<optional_statements> ->
	<statement_list>

<statement_list> ->
	<statement> <statement_list'>
<statement_list'> ->
	; <statement> <statement_list'>
	|
	ε

<statement> ->
	<variable> assignop <expression>
	|
	<procedure_statement>
	|
	<compound_statement>
	|
	while <expression> do <statement>
	|
	if <expression> then <statement> <statement'>
<statement'> ->
	else <statement>
	|
	ε
	
<variable> ->
	id <variable'>
<variable'> ->
	\[ <expression> \]
	|
	ε

<procedure_statement> ->
	call id <procedure_statement'>
<procedure_statement'> ->
	\( <expression_list> \)
	|
	ε
	
<expression_list> ->
	<expression> <expression_list'>
<expression_list'> ->
	, <expression> <expression_list'>
	|
	ε
	
<expression> ->
	<simple_expression> <expression'>
    { 
        if <expression'>.op <> nop then
            print("printing op: ", <expression'>.op)
            halt()
        fi
        <expression'>.in := <simple_expression>.val
        <expression>.type := "derp"
    }
<expression'> ->
	relop <simple_expression>
    {
        <expression'>.op := relop.val
        <expression'>.val := <simple_expression>.val
    }
	|
	ε
    {
        <expression'>.op := nop
        <expression'>.type := void
    }
	
<simple_expression> ->
	<sign> <term> <simple_expression'> 
    {
        
    }
	|
	<term> <simple_expression'>
<simple_expression'> ->
	addop <term> <simple_expression'>
    {
    }
	|
	ε

<term> ->
	<factor> <term'>
	{
		<term>.val := herp
	}
<term'> ->
	mulop <factor> <term'>
	|
	ε

<factor> ->
	id <factor'>
    {
        if <factor'>.type <> void then
            <factor>.derp := 1+1
        else
            print("printing factor type:", <factor'>.type)
        fi
    }
	|
	num
    { 
        <factor>.val := num.val
    }
	|
	\( <expression> \)
    { 
        <factor>.val := <expression>.val
    }
	|
	not <factor>
    {
        <factor>.val := not <factor>.val
    }
    
<factor'> ->
	\[ <expression> \]
    { 
        <factor'>.type := <expression>.type
        <factor'>.val := <expression>.val
        print("printing <factor'>.type", <expression>.type)
    }
	|
	ε
    {
        <factor'>.type := void
    }
    
<sign> ->
	\+ | \-
