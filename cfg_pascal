<program> ->
	program id \( <identifier_list> \) ;
	<program'>
	<compound_statement>
	.
	{
		<program>.type := derp;
		<program>.code := "derr derrr derr derr derr";
	} 

<program'> ->
	<declarations> <dec>
	{}             
	|
	<subprogram_declarations>
	{}
	|
	ε
	
<dec> ->
	<subprogram_declarations>
	{}
	|
	ε

<identifier_list> ->
	id <identifier_list'>
	{
		<identifier_list>.type := file;
		<id>.bob := if a < b then
						blah
					else
						if a+b <> 324.12 then
							derp (he.qr, <derp>.y)
						else
							printf(derp)
					;
		addtype (id.entry, <identifier_list>.type);
		<id>.grr := ---598234;
	}
<identifier_list'> ->
	, id <identifier_list'>
	{
		<identifier_list'>.type := file;
		addtype (id.entry, <identifier_list>.type);
	}
	|
	ε

<declarations> ->
	var id : <type> ; <declarations'>
<declarations'> ->
	var id : <type> ; <declarations'>
	|
	ε

<type> ->
	<standard_type>
	|
	array [ num . . num ] of <standard_type>
    {
    }

<standard_type> ->
	integer
    { <standard_type>.type := integer }
	|
	real
    { <standard_type.type> := real }
	
<subprogram_declarations> ->
	<subprogram_declaration> ; <subprogram_declarations'>
<subprogram_declarations'> ->
	<subprogram_declaration> ; <subprogram_declarations'>
	|
	ε

<subprogram_declaration> ->
	<subprogram_head>
	<subprogram_declaration'>
	<compound_statement>
<subprogram_declaration'> ->
	<declarations> <dec>
	|
	<subprogram_declarations>
	|
	ε

<subprogram_head> ->
	procedure id <subprogram_head'>;
<subprogram_head'> ->
	<arguments>
	|
	ε

<arguments> ->
	\( <parameter_list> \)
<parameter_list> ->
	id : <type> <parameter_list'>
<parameter_list'> ->
	; id : <type> <parameter_list'>
	|
	ε
	
<compound_statement> ->
	begin
	<compound_statement'>
	end
<compound_statement'> ->
	<optional_statements>
	|
	ε
	
<optional_statements> ->
	<statement_list>

<statement_list> ->
	<statement> <statement_list'>
<statement_list'> ->
	; <statement> <statement_list'>
	|
	ε

<statement> ->
	<variable> assignop <expression>
	|
	<procedure_statement>
	|
	<compound_statement>
	|
	while <expression> do <statement>
	|
	if <expression> then <statement> <statement'>
<statement'> ->
	else <statement>
	|
	ε
	
<variable> ->
	id <variable'>
<variable'> ->
	[ <expression> ]
	|
	ε

<procedure_statement> ->
	call id <procedure_statement'>
<procedure_statement'> ->
	\( <expression_list> \)
	|
	ε
	
<expression_list> ->
	<expression> <expression_list'>
<expression_list'> ->
	, <expression> <expression_list'>
	|
	ε
	
<expression> ->
	<simple_expression> <expression'>
<expression'> ->
	relop <simple_expression>
	|
	ε
	
<simple_expression> ->
	<sign> <term> <simple_expression'>
	|
	<term> <simple_expression'>
<simple_expression'> ->
	addop <term> <simple_expression'>
	|
	ε

<term> ->
	<factor> <term'>
	{
		
	}
<term'> ->
	mulop <factor> <term'>
	|
	ε

<factor> ->
	id <factor'>
    { <factor>.type := id.array.type × 33}
	|
	num
    { <factor>.type := num.type}
	|
	\( <expression> \)
    { <factor>.type := <expression>.type }
	|
	not <factor>
    { <factor>.type := <factor1>.type }
<factor'> ->
	[ <expression> ]
    { <factor'>.type := <expression>.type }
	|
	ε
    
<sign> ->
	\+ | \-
