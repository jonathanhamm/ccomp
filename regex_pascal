program
var
array
integer
function
procedure
begin
end
if
then
else
while
do
not
call
of
real
:
;
\(
\)
.
,
[
]

<letter>{definition}->
    a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z |
    A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z

<digit>{definition}->
    0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

<id>{idtype}->
    <letter> (<letter> | <digit> ) *
    
<digits>{definition}->
    <digit> +

<fraction>{definition}->
    . <digits>
        
<exponent>{definition}->
    E ( \+ | - | Îµ ) <digits> {length = 2}

<numint>{length = 10, definition}-> 
    <digits>
<numreal>{definition}->
    <digits>{length = 5} <fraction>{length = 6}
<numlreal>{definition}->
    <numreal> <exponent>

<num>->
    <numint> {attribute = 0, length = 10, type = integer } 
    |
    <numreal> {attribute = 1, type = real}
    |
    <numlreal> {attribute = 2, type = real}

<relop>->
    = {0} | <> {1} | < {2} | <= {3} | >= {4} | > {5}
    
<addop>->
    \+ {0} | - {1} | or {2}

<mulop>->
    \* {0} | \/ {2} | div {3} | mod {4} | and {5}

<assignop>->
    :=
