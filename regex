<start>=>
    <keywords>
    <tokens>

<keywords>=>
    terminal <keywords>
    {
        addkeyword(terminal);
    }
    |
    ε

<tokens>=>
    <texp> <tokens'>
<tokens'>=>
    EOL <texp> <tokens'>
    |
    ε

<texp>=>
    nonterm prodsym <expression>
    {
        addgraph(nonterm);
    }
<expression>=>
    <term> <closure> <expression'>
    {
        <term>:
            start := <term>.start
            final := <term>.final
        <closure>:
            if  <closure>.val = kleenestar then
                start := makenode()
                final := makenode()
                start.addedge(edge(ε), <term>.start)
                <term>.final.addedge(edge(ε), final)
                <term>.final.addcycle(edge(ε), final)
            elif <closure>.val = pos then
            
            elif <closure>.val = ornull then
            
            elif <closure>.val = null then
            
            else
                throw syntax error
            fi
        <expression'>:
            if <expression'>.op = UNION then
                if inherited = null then
                    start := makenode()
                    final := makenode()
                    start.addedge(edge(ε), <term>.start)
                    start.addedge(edge(ε), <expression'>.start)
                    <term>.final.addedge(edge(ε), final)
                    <expression'>.final.addedge(edge(ε), final)
                else
                    inherited.start.addedge(edge(ε), <expression'>.start)
                    <expression'>.final.addedge(edge(ε), inherited.final)
                fi
            else if <expression'>.op = CONCATENATION then
                final := <expression'>.final
                <term>.final := <expression'>.start
            fi
            <expression>.start := start
            <expression>.final := final
        return: {<expression>}
        
    }
<expression'>=>
    union <expression>
    {
        makenode(<expression>);
        <expression'>.op := union;
        <expression'>.branches := <expression>.branches;
    }
    |
    <expression>
    {
        makenode(<expression>);
        <expression'>.op := concat;
        <expression'>.branches := <expression>.branches;
    }
    |
    ε
    {
        return { .op := NOP, .expression := NULL }
    }

<term>=>
    ( <expression> )
    {
        makenode(<expression>);
        <term>.branches := <expression>.branches;
    }
    |
    terminal <expression'>
    {
        terminal:
            start := makenode()
            final := makenode()
            start.addedge(edge(terminal), final)
        <expression'>:
            if <expression'>.op = UNION then
                if inherited.start = NULL then
                    start_ := makenode()
                    final_ := makenode()
                else
                    start_ := inherited.start
                    final_ := inherited.final
                fi
                start_.addedge(edge(ε), start)
                start_.addedge(edge(ε), <expression'>.start)
                final.addedge(edge(ε), final_)
                <expression'>.final.addedge(edge(ε), final_)
                start := start_
                final := final_
            elif <expression'>.op = CONCATENATION then
                <expression'>.start := final 
                final := <expression'>.final
            fi
            <term>.start := start
            <term>.final := final
        return { <term> }
    }
    |
    nonterm <expression'>
    {
        nonterm:
            start := makenode()
            final := makenode()
            start.addedge(edge(nonterm), final)
        <expression'>:
            if <expression'>.op = UNION then
                if inherited.start = NULL then
                    start_ := makenode()
                    final_ := makenode()
                else
                    start_ := inherited.start
                    final_ := inherited.final
                fi
                start_ := makenode()
                final_ := makenode()
                start_.addedge(edge(ε), start)
                start_.addedge(edge(ε), <expression'>.start)
                final.addedge(edge(ε), final_)
                <expression'>.final.addedge(edge(ε), final_)
                start := start_
                final := final_
            elif <expression'>.op = CONCATENATION then
                <expression'>.start := final 
                final := <expression'>.final
            fi
            <term>.start := start
            <term>.final := final
        return { <term> }
    }


<closure>=>
    * { <closure>.curr := kleenestar; }
    | 
    + { <closure>.curr := pos; } 
    | 
    ? { <closure>.curr := ornull; }
    | 
    <closure> { <closure1>.curr := <closure2>.curr; }
    |
    ε
    